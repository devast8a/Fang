import grammar from "./grammar";
import * as nearley from "nearley";

// Create a Parser object from our grammar.
const Grammar = nearley.Grammar.fromCompiled(grammar);

function first(data: any){return data[0];}

// Simplify our AST a bit. If our rule only has one thing it matches on,
//  don't create a new deeper set of nodes.
//
// Eg. Typically `foo -> bar bar; bar -> "A"`
//  would generate the ast [["A"], ["A"]] for the input "AA".
//  We decided to remove the extra layer of indirection, instead generating ["A", "A"]
for(const rule of Grammar.rules){
    if(rule.name.indexOf('$') !== -1) {
        // Post-processors generated by Nearley rules.
        // We need to be careful about applying it to Nearley generated rules,
        //  otherwise we could break them - in particular rules that compact repetition into arrays

        // Macro calls
        if(/\$macrocall\$\d+$/.test(rule.name)){
            if(rule.postprocess !== undefined){
                // Already has a post-processor assigned
            } else if(rule.symbols.length === 1) {
                rule.postprocess = first;
            }
        }
    } else if(rule.postprocess !== undefined){
        // Already has a post-processor assigned
    } else if(rule.symbols.length === 1) {
        rule.postprocess = first;
    }
}

export default Grammar;