struct CrcOptions generic[T] {
    # These are parameters used to generate the table
    # TODO: Remove these fields when we switch to a constructor
    val order: T
    val polynomial: T

    val initialValue: T
    val xorOutputWith: T
    val reflectInput: Bool
    val reflectOutput: Bool
    val table: List[T, 256]
}

struct Crc impl Hasher {
    type Digest = U32
    type State = U32
    type Options = CrcOptions
    
    val options: Options
    mut state: State

    fn new(options: CrcOptions*) {
        return Crc{
            digest: copy options*.initialValue
            options: options
        }
    }

    fn reset(mut self) {
        self.digest = copy self.options*.initialValue
    }

    fn update(mut self, buffer: Buffer) {
        alias digest = self.digest
        alias lookup  = self.options*.table.get

        for val byte in buffer {
            digest = digest>>8 ^ lookup(digest^byte & 0xFF)??0
        }
    }

    fn get(self, buffer: Buffer) {
        # buffer.size == 0
        return digest ^ self.options*.xorOutputWith
    }
}

fn CRC_3_GSM()        => Crc(3, 0x3, 0x0, 0x7, false, false)
fn CRC_3_ROHC()       => Crc(3, 0x3, 0x7, 0x0, true, true)
fn CRC_4_INTERLAKEN() => Crc(4, 0x3, 0xF, 0x0, false, false)
fn CRC_32_IEEE()      => Crc(32, 0x04C11DB7, 0xFFFFFFFF, 0xFFFFFFFF, true, true)
fn CRC_32_MPEG2()     => Crc(32, 0x04C11DB7, 0xFFFFFFFF, 0x00000000, false, false)
fn CRC_32_POSIX()     => Crc(32, 0x04C11DB7, 0x00000000, 0xFFFFFFFF, false, false)
fn CRC_64_IEEE()      => Crc(64, 0x42F0E1EBA9EA3693, 0x0000000000000000, 0x0000000000000000, true, true)