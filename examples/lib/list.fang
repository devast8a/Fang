struct List {
    mut ptr: Ptr
    mut size: Size

    fn push(mut self, own value: u32) -> u32 {
        self.size = self.size + 4
        self.ptr  = realloc(self.ptr, self.size)
        deref_ptr(self.ptr, self.size - 4, value)
        return 0
    }

    fn pop(mut self) -> u32 {
        self.size = self.size - 4
        val value: u32 = deref_ptr(self.ptr, self.size)
        self.ptr  = realloc(self.ptr, self.size)
        return value
    }
}

fn List_create(size: Size) -> List {
    return List{malloc(size), size}
}

fn main() -> u32 {
    val list = List_create(0)
    
    list.push(10)
    list.push(20)
    list.push(30)

    printf("%d\n", list.pop())
    printf("%d\n", list.pop())
    printf("%d\n", list.pop())
}