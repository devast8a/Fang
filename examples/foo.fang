struct u32 {}
struct bool {}

fn infix_codegen()
fn infix+(left: u32, right: u32) -> u32
fn infix<(left: u32, right: u32) -> bool
fn infix<=(left: u32, right: u32) -> bool

trait Pair {
    val x: u32
    val y: u32
}

struct Vec2d {
    val x: u32
    val y: u32
}

struct Vec3d {
    val x: u32
    val y: u32
    val z: u32
}

fn sum(pair: Pair) -> u32 {
    return pair.x + pair.y
}

fn main() -> u32 {
    val v2d = Vec2d{1, 2}
    val v3d = Vec3d{3, 4, 5}

    if (v2d.x <= 10) {
        v2d.x = 10
    }

    return sum(v2d) + sum(v3d)
}