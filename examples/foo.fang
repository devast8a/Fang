# Sum all numbers between 1 and 1000 that are a multiple or 3 and/or 5
fn calculate() -> u32 {
    val num: u32 = 0
    val sum: u32 = 0

    while (num < 1000) {
        if (num % 3 == 0) {
            sum = sum + num
        } else if (num % 5 == 0) {
            sum = sum + num
        }

        num = num + 1
    }

    return sum
}

fn main() -> u32 {
    val ct = calculate!()
    val rt = calculate()
    
    printf("%d\n", ct)
    printf("%d\n", rt)
    return 0
}






# Manually declare builtin functions and types
#   This crap will be cleaned up eventually and be part of an automatically included prelude
struct u32
struct bool
struct str
fn infix+(left: u32, right: u32) -> u32
fn infix-(left: u32, right: u32) -> u32
fn infix%(left: u32, right: u32) -> u32
fn infix<(left: u32, right: u32) -> bool
fn infix<=(left: u32, right: u32) -> bool
fn infix==(left: u32, right: u32) -> bool
fn printf(s: str, d: u32)