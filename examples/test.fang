# Identified problems so far:
#   Assignment operators need to be implemented `+=`
#   Some kind of range (for i in range(...))
fn euler1_multiple3or5() {
    mut i = 0
    mut sum = 0

    while i < 1000 {
        if i%3 == 0 or i%5 == 0 {
            sum = sum + i
        }
        i = i + 1
    }

    print("Sum of 3 and 5", sum)
}

fn euler2_evenFib() {
    mut x = 1
    mut y = 1

    mut sum = 0

    while y < 4_000_000 {
        # Get the next fibonacci number
        val t = x
        x = y
        y = t + x

        if y%2 == 0 {
            sum = sum + y
        }
    }

    print("Even Fibonacci Numbers", sum)
}

# Problems:
#   Need some memory
fn euler3_largestPrimeFactor() {
    val target = 600851475143 
    val sqrt = Math.sqrt(target)

    mut largest = 0

    mut i = 2
    while i < sqrt {
        if target%i == 0 {
            # Check if the number is prime
            mut prime = true
            mut ii = 2
            val s = Math.sqrt(i)
            while ii < s {
                if i%ii == 0 {
                    prime = false
                }
                ii = ii + 1
            }
            if prime {
                largest = i
            }
        }
        i = i + 1
    }

    print("Largest Prime Factor", largest)
}

fn euler4_largestPalindrome() {
    mut largest = 0
    mut x = 999
    while x > 0 {
        mut y = 999

        while y > 0 {
            val s = String.from(x * y)

            if x*y > largest and s == s.reverse() {
                largest = x*y
            }

            y = y - 1
        }
        x = x - 1
    }


    print("Largest Palindrome", largest)
}

fn gcd(a: Num, b: Num) {
    while b != 0 {
        val t = b
        b = a % b
        a = t
    }
    return a
}

fn lcm(a, b) {
    return Math.abs(a * b) / gcd(a, b)
}

# Pretty happy with the solution
fn euler5_smallestMultiple() {
    for i in 1..20 {
        prev = lcm(prev, i)
    }

    print("Smallest Multiple", prev)
}

fn main() {
    euler1_multiple3or5()
    euler2_evenFib()
    euler3_largestPrimeFactor()
    euler4_largestPalindrome()
    euler5_smallestMultiple()
}