class T {}
class Ref {}

fn foo() {
    mut value = T{}
    value = T{}
}

fn foo() {
    val value = T{}
    consume(move(value))
}

fn foo() {
    mut value = T{}
    consume(move(value))
    value = T{}
}

fn foo() {
    mut value = T{}
    if (true) {
        consume(move(value))
    }
}

fn foo() {
    mut value = T{}
    if (true) {
        consume(move(value))
    } else {
        consume(move(value))
    }
}

fn foo() {
    mut value = T{}
    if (true) {
        consume(move(value))
        value = T{}
    }
}

fn foo() {
    mut value = T{}
    if (true) {
        consume(move(value))
        value = T{}
    }
    consume(move(value))
}

# fn foo() {
#     mut value = T{}
#     if (true) {
#         consume(move(value))
#     }
#     consume(move(value))
# }

# fn example3() {
#     mut foo = T{}
#     mut bar = T{}
#     mut p   = Ref{foo}
# 
#     # foo: Alive, bar: Alive, p: Alive, p -> {foo}
#     if (true) {
#         take_value(move(p))
#         # foo: Moved, bar: Alive, p: Moved, p -> {}
#         
#         p = Ref{bar}
#         # foo: Moved, bar: Alive, p: Alive, p -> {bar}
#     }
#     # foo: Dynamic, bar: Alive, p: Alive, p -> {foo, bar}
# 
#     take_value(move(p))
#     # foo: Dynamic, bar: Dynamic, p: Moved
# }
